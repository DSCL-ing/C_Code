

//递归：像是一种逻辑结构，数学抽象，技巧性强。
//非递归，往往是从本质开始，物理结构，实际怎样就怎样进行


//如果待排序的序列中存在两个或两个以上具有相同关键词的数据，排序后这些数据的相对次序保持不变，即它们的位置保持不变，通俗地讲，就是两个相同的数的相对顺序不会发生改变，则该算法是稳定的；如果排序后，数据的相对次序发生了变化，则该算法是不稳定的。关键词相同的数据元素将保持原有位置不变，所以该算法是稳定的

//稳定排序
/*
（相同数的相对前后位置在排序后没有改变。）
* 解释：排在前面的数，在排完序后还是在前面。
* 作用举例：同分的同学中先考完试的排在前面


* 不同方法稳定性判断依据：代码能够控制实现相对位置不变，如插入排序可以稳定可以不稳定，
只要能稳定就是稳定排序


* 稳定排序有：
插入排序：插入可控
冒泡排序：交换可控
归并排序：归并可控

* 不稳定排序有：
希尔排序：预排序
堆排序：建堆方法不同得到的堆不一样，一个子树中，相同大小的数的位置不一定一样
选择排序：选择、排序后先选到的排最外，相对逆序
快速排序：找大找小交换

*/


//※内外排序
/*
* 内排序：在内存中进行排序
* 外排序：在磁盘中排。

* 外排序有：
归并排序：把大文件分成小文件，排好小文件，再归并排大文件









*/